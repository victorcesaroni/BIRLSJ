// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2016 17:47:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Projeto3_V2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Projeto3_V2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
// wires                                               
wire [31:0] DBG_INSTRUCAO_IF;
wire [31:0] DBG_MEM0;
wire [31:0] DBG_MEM1;
wire [31:0] DBG_MEM2;
wire [31:0] DBG_MEM3;
wire [31:0] DBG_MEM4;
wire [31:0] DBG_MEM5;
wire [31:0] DBG_MEM6;
wire [31:0] DBG_MEM7;
wire [31:0] DBG_PC_IF;
wire [31:0] DBG_R0_DATA;
wire [31:0] DBG_R1_DATA;
wire [31:0] DBG_R2_DATA;
wire [31:0] DBG_R3_DATA;
wire [31:0] DBG_R4_DATA;
wire [31:0] DBG_R5_DATA;
wire [31:0] DBG_R6_DATA;
wire [31:0] DBG_R7_DATA;
wire [31:0] DBG_R8_DATA;
wire [31:0] DBG_R9_DATA;
wire [31:0] DBG_R10_DATA;
wire [31:0] DBG_R11_DATA;
wire [31:0] DBG_R12_DATA;
wire [31:0] DBG_R13_DATA;
wire [31:0] DBG_R14_DATA;
wire [31:0] DBG_R15_DATA;
wire [31:0] DBG_R16_DATA;
wire [31:0] DBG_R17_DATA;
wire [31:0] DBG_R18_DATA;
wire [31:0] DBG_R19_DATA;
wire [31:0] DBG_R20_DATA;
wire [31:0] DBG_R21_DATA;
wire [31:0] DBG_R22_DATA;
wire [31:0] DBG_R23_DATA;
wire [31:0] DBG_R24_DATA;
wire [31:0] DBG_R25_DATA;
wire [31:0] DBG_R26_DATA;
wire [31:0] DBG_R27_DATA;
wire [31:0] DBG_R28_DATA;
wire [31:0] DBG_R29_DATA;
wire [31:0] DBG_R30_DATA;
wire [31:0] DBG_R31_DATA;

// assign statements (if any)                          
Projeto3_V2 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DBG_INSTRUCAO_IF(DBG_INSTRUCAO_IF),
	.DBG_MEM0(DBG_MEM0),
	.DBG_MEM1(DBG_MEM1),
	.DBG_MEM2(DBG_MEM2),
	.DBG_MEM3(DBG_MEM3),
	.DBG_MEM4(DBG_MEM4),
	.DBG_MEM5(DBG_MEM5),
	.DBG_MEM6(DBG_MEM6),
	.DBG_MEM7(DBG_MEM7),
	.DBG_PC_IF(DBG_PC_IF),
	.DBG_R0_DATA(DBG_R0_DATA),
	.DBG_R1_DATA(DBG_R1_DATA),
	.DBG_R2_DATA(DBG_R2_DATA),
	.DBG_R3_DATA(DBG_R3_DATA),
	.DBG_R4_DATA(DBG_R4_DATA),
	.DBG_R5_DATA(DBG_R5_DATA),
	.DBG_R6_DATA(DBG_R6_DATA),
	.DBG_R7_DATA(DBG_R7_DATA),
	.DBG_R8_DATA(DBG_R8_DATA),
	.DBG_R9_DATA(DBG_R9_DATA),
	.DBG_R10_DATA(DBG_R10_DATA),
	.DBG_R11_DATA(DBG_R11_DATA),
	.DBG_R12_DATA(DBG_R12_DATA),
	.DBG_R13_DATA(DBG_R13_DATA),
	.DBG_R14_DATA(DBG_R14_DATA),
	.DBG_R15_DATA(DBG_R15_DATA),
	.DBG_R16_DATA(DBG_R16_DATA),
	.DBG_R17_DATA(DBG_R17_DATA),
	.DBG_R18_DATA(DBG_R18_DATA),
	.DBG_R19_DATA(DBG_R19_DATA),
	.DBG_R20_DATA(DBG_R20_DATA),
	.DBG_R21_DATA(DBG_R21_DATA),
	.DBG_R22_DATA(DBG_R22_DATA),
	.DBG_R23_DATA(DBG_R23_DATA),
	.DBG_R24_DATA(DBG_R24_DATA),
	.DBG_R25_DATA(DBG_R25_DATA),
	.DBG_R26_DATA(DBG_R26_DATA),
	.DBG_R27_DATA(DBG_R27_DATA),
	.DBG_R28_DATA(DBG_R28_DATA),
	.DBG_R29_DATA(DBG_R29_DATA),
	.DBG_R30_DATA(DBG_R30_DATA),
	.DBG_R31_DATA(DBG_R31_DATA)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #1000 1'b1;
	#1000;
end 
endmodule

