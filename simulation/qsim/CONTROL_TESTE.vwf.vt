// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2016 10:23:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CONTROL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONTROL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] INSTRUCAO;
// wires                                               
wire [2:0] ALUOp;
wire ALUSrc;
wire [5:0] FUNCT;
wire MemRead;
wire MemtoReg;
wire MemWrite;
wire [3:0] OPCODE;
wire [1:0] PCSource;
wire RegDst;
wire RegWrite;

// assign statements (if any)                          
CONTROL i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.ALUSrc(ALUSrc),
	.FUNCT(FUNCT),
	.INSTRUCAO(INSTRUCAO),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.OPCODE(OPCODE),
	.PCSource(PCSource),
	.RegDst(RegDst),
	.RegWrite(RegWrite)
);
initial 
begin 
#1000000 $finish;
end 
// INSTRUCAO[ 31 ]
initial
begin
	INSTRUCAO[31] = 1'b0;
end 
// INSTRUCAO[ 30 ]
initial
begin
	INSTRUCAO[30] = 1'b0;
end 
// INSTRUCAO[ 29 ]
initial
begin
	INSTRUCAO[29] = 1'b0;
end 
// INSTRUCAO[ 28 ]
initial
begin
	INSTRUCAO[28] = 1'b0;
end 
// INSTRUCAO[ 27 ]
initial
begin
	INSTRUCAO[27] = 1'b0;
end 
// INSTRUCAO[ 26 ]
initial
begin
	INSTRUCAO[26] = 1'b0;
end 
// INSTRUCAO[ 25 ]
initial
begin
	INSTRUCAO[25] = 1'b0;
end 
// INSTRUCAO[ 24 ]
initial
begin
	INSTRUCAO[24] = 1'b0;
end 
// INSTRUCAO[ 23 ]
initial
begin
	INSTRUCAO[23] = 1'b0;
end 
// INSTRUCAO[ 22 ]
initial
begin
	INSTRUCAO[22] = 1'b0;
end 
// INSTRUCAO[ 21 ]
initial
begin
	INSTRUCAO[21] = 1'b0;
end 
// INSTRUCAO[ 20 ]
initial
begin
	INSTRUCAO[20] = 1'b0;
end 
// INSTRUCAO[ 19 ]
initial
begin
	INSTRUCAO[19] = 1'b0;
end 
// INSTRUCAO[ 18 ]
initial
begin
	INSTRUCAO[18] = 1'b0;
end 
// INSTRUCAO[ 17 ]
initial
begin
	INSTRUCAO[17] = 1'b0;
end 
// INSTRUCAO[ 16 ]
initial
begin
	INSTRUCAO[16] = 1'b0;
end 
// INSTRUCAO[ 15 ]
initial
begin
	INSTRUCAO[15] = 1'b0;
end 
// INSTRUCAO[ 14 ]
initial
begin
	INSTRUCAO[14] = 1'b0;
end 
// INSTRUCAO[ 13 ]
initial
begin
	INSTRUCAO[13] = 1'b0;
end 
// INSTRUCAO[ 12 ]
initial
begin
	INSTRUCAO[12] = 1'b0;
end 
// INSTRUCAO[ 11 ]
initial
begin
	INSTRUCAO[11] = 1'b0;
end 
// INSTRUCAO[ 10 ]
initial
begin
	INSTRUCAO[10] = 1'b0;
end 
// INSTRUCAO[ 9 ]
initial
begin
	INSTRUCAO[9] = 1'b0;
end 
// INSTRUCAO[ 8 ]
initial
begin
	INSTRUCAO[8] = 1'b0;
end 
// INSTRUCAO[ 7 ]
initial
begin
	INSTRUCAO[7] = 1'b0;
end 
// INSTRUCAO[ 6 ]
initial
begin
	INSTRUCAO[6] = 1'b0;
end 
// INSTRUCAO[ 5 ]
initial
begin
	INSTRUCAO[5] = 1'b0;
end 
// INSTRUCAO[ 4 ]
initial
begin
	INSTRUCAO[4] = 1'b0;
end 
// INSTRUCAO[ 3 ]
initial
begin
	INSTRUCAO[3] = 1'b0;
end 
// INSTRUCAO[ 2 ]
initial
begin
	INSTRUCAO[2] = 1'b0;
end 
// INSTRUCAO[ 1 ]
initial
begin
	INSTRUCAO[1] = 1'b0;
end 
// INSTRUCAO[ 0 ]
initial
begin
	INSTRUCAO[0] = 1'b0;
	INSTRUCAO[0] = #240000 1'b1;
	INSTRUCAO[0] = #250000 1'b0;
end 
endmodule

