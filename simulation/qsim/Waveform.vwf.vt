// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2016 16:05:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MUX16_2_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX16_2_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CONTROLE;
reg [15:0] ENTRADA_0;
reg [15:0] ENTRADA_1;
// wires                                               
wire [15:0] SAIDA;

// assign statements (if any)                          
MUX16_2_1 i1 (
// port map - connection between master ports and signals/registers   
	.CONTROLE(CONTROLE),
	.ENTRADA_0(ENTRADA_0),
	.ENTRADA_1(ENTRADA_1),
	.SAIDA(SAIDA)
);
initial 
begin 
#1000000 $finish;
end 

// CONTROLE
initial
begin
	CONTROLE = 1'b0;
	CONTROLE = #50000 1'b1;
	CONTROLE = #240000 1'b0;
end 
// ENTRADA_0[ 15 ]
initial
begin
	ENTRADA_0[15] = 1'b0;
end 
// ENTRADA_0[ 14 ]
initial
begin
	ENTRADA_0[14] = 1'b0;
end 
// ENTRADA_0[ 13 ]
initial
begin
	ENTRADA_0[13] = 1'b0;
end 
// ENTRADA_0[ 12 ]
initial
begin
	ENTRADA_0[12] = 1'b0;
end 
// ENTRADA_0[ 11 ]
initial
begin
	ENTRADA_0[11] = 1'b0;
end 
// ENTRADA_0[ 10 ]
initial
begin
	ENTRADA_0[10] = 1'b0;
end 
// ENTRADA_0[ 9 ]
initial
begin
	ENTRADA_0[9] = 1'b0;
end 
// ENTRADA_0[ 8 ]
initial
begin
	ENTRADA_0[8] = 1'b0;
end 
// ENTRADA_0[ 7 ]
initial
begin
	ENTRADA_0[7] = 1'b0;
end 
// ENTRADA_0[ 6 ]
initial
begin
	ENTRADA_0[6] = 1'b0;
end 
// ENTRADA_0[ 5 ]
initial
begin
	ENTRADA_0[5] = 1'b0;
end 
// ENTRADA_0[ 4 ]
initial
begin
	ENTRADA_0[4] = 1'b0;
end 
// ENTRADA_0[ 3 ]
initial
begin
	ENTRADA_0[3] = 1'b0;
end 
// ENTRADA_0[ 2 ]
initial
begin
	ENTRADA_0[2] = 1'b0;
end 
// ENTRADA_0[ 1 ]
initial
begin
	ENTRADA_0[1] = 1'b0;
end 
// ENTRADA_0[ 0 ]
initial
begin
	ENTRADA_0[0] = 1'b0;
end 
// ENTRADA_1[ 15 ]
initial
begin
	ENTRADA_1[15] = 1'b1;
end 
// ENTRADA_1[ 14 ]
initial
begin
	ENTRADA_1[14] = 1'b1;
end 
// ENTRADA_1[ 13 ]
initial
begin
	ENTRADA_1[13] = 1'b1;
end 
// ENTRADA_1[ 12 ]
initial
begin
	ENTRADA_1[12] = 1'b1;
end 
// ENTRADA_1[ 11 ]
initial
begin
	ENTRADA_1[11] = 1'b1;
end 
// ENTRADA_1[ 10 ]
initial
begin
	ENTRADA_1[10] = 1'b1;
end 
// ENTRADA_1[ 9 ]
initial
begin
	ENTRADA_1[9] = 1'b1;
end 
// ENTRADA_1[ 8 ]
initial
begin
	ENTRADA_1[8] = 1'b1;
end 
// ENTRADA_1[ 7 ]
initial
begin
	ENTRADA_1[7] = 1'b1;
end 
// ENTRADA_1[ 6 ]
initial
begin
	ENTRADA_1[6] = 1'b1;
end 
// ENTRADA_1[ 5 ]
initial
begin
	ENTRADA_1[5] = 1'b1;
end 
// ENTRADA_1[ 4 ]
initial
begin
	ENTRADA_1[4] = 1'b1;
end 
// ENTRADA_1[ 3 ]
initial
begin
	ENTRADA_1[3] = 1'b1;
end 
// ENTRADA_1[ 2 ]
initial
begin
	ENTRADA_1[2] = 1'b1;
end 
// ENTRADA_1[ 1 ]
initial
begin
	ENTRADA_1[1] = 1'b1;
end 
// ENTRADA_1[ 0 ]
initial
begin
	ENTRADA_1[0] = 1'b1;
end 
endmodule

