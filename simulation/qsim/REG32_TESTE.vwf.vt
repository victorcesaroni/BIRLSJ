// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2016 17:34:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          REG32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module REG32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [31:0] ENTRADA;
reg REG_IN;
// wires                                               
wire [31:0] SAIDA;

// assign statements (if any)                          
REG32 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.ENTRADA(ENTRADA),
	.REG_IN(REG_IN),
	.SAIDA(SAIDA)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #20000 1'b1;
	#20000;
end 
// ENTRADA[ 31 ]
initial
begin
	ENTRADA[31] = 1'b0;
end 
// ENTRADA[ 30 ]
initial
begin
	ENTRADA[30] = 1'b0;
end 
// ENTRADA[ 29 ]
initial
begin
	ENTRADA[29] = 1'b0;
end 
// ENTRADA[ 28 ]
initial
begin
	ENTRADA[28] = 1'b0;
end 
// ENTRADA[ 27 ]
initial
begin
	ENTRADA[27] = 1'b0;
end 
// ENTRADA[ 26 ]
initial
begin
	ENTRADA[26] = 1'b0;
end 
// ENTRADA[ 25 ]
initial
begin
	ENTRADA[25] = 1'b0;
end 
// ENTRADA[ 24 ]
initial
begin
	ENTRADA[24] = 1'b0;
end 
// ENTRADA[ 23 ]
initial
begin
	ENTRADA[23] = 1'b0;
end 
// ENTRADA[ 22 ]
initial
begin
	ENTRADA[22] = 1'b0;
end 
// ENTRADA[ 21 ]
initial
begin
	ENTRADA[21] = 1'b0;
end 
// ENTRADA[ 20 ]
initial
begin
	ENTRADA[20] = 1'b0;
end 
// ENTRADA[ 19 ]
initial
begin
	ENTRADA[19] = 1'b0;
	ENTRADA[19] = #170000 1'b1;
	ENTRADA[19] = #10000 1'b0;
end 
// ENTRADA[ 18 ]
initial
begin
	ENTRADA[18] = 1'b0;
end 
// ENTRADA[ 17 ]
initial
begin
	ENTRADA[17] = 1'b0;
end 
// ENTRADA[ 16 ]
initial
begin
	ENTRADA[16] = 1'b0;
	ENTRADA[16] = #170000 1'b1;
	ENTRADA[16] = #10000 1'b0;
	ENTRADA[16] = #10000 1'b1;
	ENTRADA[16] = #10000 1'b0;
end 
// ENTRADA[ 15 ]
initial
begin
	ENTRADA[15] = 1'b0;
	ENTRADA[15] = #170000 1'b1;
	ENTRADA[15] = #10000 1'b0;
	ENTRADA[15] = #10000 1'b1;
	ENTRADA[15] = #10000 1'b0;
end 
// ENTRADA[ 14 ]
initial
begin
	ENTRADA[14] = 1'b0;
	ENTRADA[14] = #170000 1'b1;
	ENTRADA[14] = #10000 1'b0;
	ENTRADA[14] = #10000 1'b1;
	ENTRADA[14] = #10000 1'b0;
end 
// ENTRADA[ 13 ]
initial
begin
	ENTRADA[13] = 1'b0;
	ENTRADA[13] = #170000 1'b1;
	ENTRADA[13] = #10000 1'b0;
	ENTRADA[13] = #10000 1'b1;
	ENTRADA[13] = #10000 1'b0;
end 
// ENTRADA[ 12 ]
initial
begin
	ENTRADA[12] = 1'b0;
	ENTRADA[12] = #170000 1'b1;
	ENTRADA[12] = #10000 1'b0;
end 
// ENTRADA[ 11 ]
initial
begin
	ENTRADA[11] = 1'b0;
	ENTRADA[11] = #170000 1'b1;
	ENTRADA[11] = #10000 1'b0;
end 
// ENTRADA[ 10 ]
initial
begin
	ENTRADA[10] = 1'b0;
end 
// ENTRADA[ 9 ]
initial
begin
	ENTRADA[9] = 1'b0;
	ENTRADA[9] = #170000 1'b1;
	ENTRADA[9] = #10000 1'b0;
	ENTRADA[9] = #10000 1'b1;
	ENTRADA[9] = #10000 1'b0;
end 
// ENTRADA[ 8 ]
initial
begin
	ENTRADA[8] = 1'b0;
	ENTRADA[8] = #170000 1'b1;
	ENTRADA[8] = #10000 1'b0;
end 
// ENTRADA[ 7 ]
initial
begin
	ENTRADA[7] = 1'b0;
	ENTRADA[7] = #170000 1'b1;
	ENTRADA[7] = #10000 1'b0;
end 
// ENTRADA[ 6 ]
initial
begin
	ENTRADA[6] = 1'b0;
	ENTRADA[6] = #170000 1'b1;
	ENTRADA[6] = #10000 1'b0;
	ENTRADA[6] = #10000 1'b1;
	ENTRADA[6] = #10000 1'b0;
end 
// ENTRADA[ 5 ]
initial
begin
	ENTRADA[5] = 1'b0;
	ENTRADA[5] = #170000 1'b1;
	ENTRADA[5] = #10000 1'b0;
end 
// ENTRADA[ 4 ]
initial
begin
	ENTRADA[4] = 1'b0;
	ENTRADA[4] = #170000 1'b1;
	ENTRADA[4] = #10000 1'b0;
end 
// ENTRADA[ 3 ]
initial
begin
	ENTRADA[3] = 1'b0;
end 
// ENTRADA[ 2 ]
initial
begin
	ENTRADA[2] = 1'b0;
end 
// ENTRADA[ 1 ]
initial
begin
	ENTRADA[1] = 1'b0;
end 
// ENTRADA[ 0 ]
initial
begin
	ENTRADA[0] = 1'b0;
	ENTRADA[0] = #170000 1'b1;
	ENTRADA[0] = #10000 1'b0;
end 

// REG_IN
initial
begin
	REG_IN = 1'b1;
	REG_IN = #10000 1'b0;
	REG_IN = #160000 1'b1;
	REG_IN = #10000 1'b0;
	REG_IN = #10000 1'b1;
	REG_IN = #10000 1'b0;
end 
endmodule

