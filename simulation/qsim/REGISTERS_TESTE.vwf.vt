// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2016 18:10:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          REGISTERS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module REGISTERS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [4:0] READ0_ADDR;
reg [4:0] READ1_ADDR;
reg REGWRITE;
reg [4:0] WRITE_ADDR;
reg [31:0] WRITEDATA;
// wires                                               
wire [31:0] DBG_R0_DATA;
wire [31:0] DBG_R1_DATA;
wire [31:0] DBG_R2_DATA;
wire [31:0] DBG_R3_DATA;
wire [31:0] DBG_R4_DATA;
wire [31:0] DBG_R5_DATA;
wire [31:0] DBG_R6_DATA;
wire [31:0] READ0_OUT;
wire [31:0] READ1_OUT;

// assign statements (if any)                          
REGISTERS i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DBG_R0_DATA(DBG_R0_DATA),
	.DBG_R1_DATA(DBG_R1_DATA),
	.DBG_R2_DATA(DBG_R2_DATA),
	.DBG_R3_DATA(DBG_R3_DATA),
	.DBG_R4_DATA(DBG_R4_DATA),
	.DBG_R5_DATA(DBG_R5_DATA),
	.DBG_R6_DATA(DBG_R6_DATA),
	.READ0_ADDR(READ0_ADDR),
	.READ0_OUT(READ0_OUT),
	.READ1_ADDR(READ1_ADDR),
	.READ1_OUT(READ1_OUT),
	.REGWRITE(REGWRITE),
	.WRITE_ADDR(WRITE_ADDR),
	.WRITEDATA(WRITEDATA)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 
// WRITE_ADDR[ 4 ]
initial
begin
	WRITE_ADDR[4] = 1'b0;
end 
// WRITE_ADDR[ 3 ]
initial
begin
	WRITE_ADDR[3] = 1'b0;
end 
// WRITE_ADDR[ 2 ]
initial
begin
	WRITE_ADDR[2] = 1'b0;
end 
// WRITE_ADDR[ 1 ]
initial
begin
	WRITE_ADDR[1] = 1'b0;
end 
// WRITE_ADDR[ 0 ]
initial
begin
	WRITE_ADDR[0] = 1'b0;
	WRITE_ADDR[0] = #50000 1'b1;
	WRITE_ADDR[0] = #10000 1'b0;
end 
// WRITEDATA[ 31 ]
initial
begin
	WRITEDATA[31] = 1'b0;
	WRITEDATA[31] = #40000 1'b1;
	WRITEDATA[31] = #20000 1'b0;
end 
// WRITEDATA[ 30 ]
initial
begin
	WRITEDATA[30] = 1'b0;
	WRITEDATA[30] = #40000 1'b1;
	WRITEDATA[30] = #20000 1'b0;
end 
// WRITEDATA[ 29 ]
initial
begin
	WRITEDATA[29] = 1'b0;
	WRITEDATA[29] = #40000 1'b1;
	WRITEDATA[29] = #20000 1'b0;
end 
// WRITEDATA[ 28 ]
initial
begin
	WRITEDATA[28] = 1'b0;
	WRITEDATA[28] = #40000 1'b1;
	WRITEDATA[28] = #20000 1'b0;
end 
// WRITEDATA[ 27 ]
initial
begin
	WRITEDATA[27] = 1'b0;
	WRITEDATA[27] = #40000 1'b1;
	WRITEDATA[27] = #20000 1'b0;
end 
// WRITEDATA[ 26 ]
initial
begin
	WRITEDATA[26] = 1'b0;
	WRITEDATA[26] = #40000 1'b1;
	WRITEDATA[26] = #20000 1'b0;
end 
// WRITEDATA[ 25 ]
initial
begin
	WRITEDATA[25] = 1'b0;
	WRITEDATA[25] = #40000 1'b1;
	WRITEDATA[25] = #20000 1'b0;
end 
// WRITEDATA[ 24 ]
initial
begin
	WRITEDATA[24] = 1'b0;
	WRITEDATA[24] = #40000 1'b1;
	WRITEDATA[24] = #20000 1'b0;
end 
// WRITEDATA[ 23 ]
initial
begin
	WRITEDATA[23] = 1'b0;
	WRITEDATA[23] = #40000 1'b1;
	WRITEDATA[23] = #20000 1'b0;
end 
// WRITEDATA[ 22 ]
initial
begin
	WRITEDATA[22] = 1'b0;
	WRITEDATA[22] = #40000 1'b1;
	WRITEDATA[22] = #20000 1'b0;
end 
// WRITEDATA[ 21 ]
initial
begin
	WRITEDATA[21] = 1'b0;
	WRITEDATA[21] = #40000 1'b1;
	WRITEDATA[21] = #20000 1'b0;
end 
// WRITEDATA[ 20 ]
initial
begin
	WRITEDATA[20] = 1'b0;
	WRITEDATA[20] = #40000 1'b1;
	WRITEDATA[20] = #20000 1'b0;
end 
// WRITEDATA[ 19 ]
initial
begin
	WRITEDATA[19] = 1'b0;
	WRITEDATA[19] = #40000 1'b1;
	WRITEDATA[19] = #20000 1'b0;
end 
// WRITEDATA[ 18 ]
initial
begin
	WRITEDATA[18] = 1'b0;
	WRITEDATA[18] = #40000 1'b1;
	WRITEDATA[18] = #20000 1'b0;
end 
// WRITEDATA[ 17 ]
initial
begin
	WRITEDATA[17] = 1'b0;
	WRITEDATA[17] = #40000 1'b1;
	WRITEDATA[17] = #20000 1'b0;
end 
// WRITEDATA[ 16 ]
initial
begin
	WRITEDATA[16] = 1'b0;
	WRITEDATA[16] = #40000 1'b1;
	WRITEDATA[16] = #20000 1'b0;
end 
// WRITEDATA[ 15 ]
initial
begin
	WRITEDATA[15] = 1'b0;
	WRITEDATA[15] = #40000 1'b1;
	WRITEDATA[15] = #20000 1'b0;
end 
// WRITEDATA[ 14 ]
initial
begin
	WRITEDATA[14] = 1'b0;
	WRITEDATA[14] = #40000 1'b1;
	WRITEDATA[14] = #20000 1'b0;
end 
// WRITEDATA[ 13 ]
initial
begin
	WRITEDATA[13] = 1'b0;
	WRITEDATA[13] = #40000 1'b1;
	WRITEDATA[13] = #20000 1'b0;
end 
// WRITEDATA[ 12 ]
initial
begin
	WRITEDATA[12] = 1'b0;
	WRITEDATA[12] = #40000 1'b1;
	WRITEDATA[12] = #20000 1'b0;
end 
// WRITEDATA[ 11 ]
initial
begin
	WRITEDATA[11] = 1'b0;
	WRITEDATA[11] = #40000 1'b1;
	WRITEDATA[11] = #20000 1'b0;
end 
// WRITEDATA[ 10 ]
initial
begin
	WRITEDATA[10] = 1'b0;
	WRITEDATA[10] = #40000 1'b1;
	WRITEDATA[10] = #20000 1'b0;
end 
// WRITEDATA[ 9 ]
initial
begin
	WRITEDATA[9] = 1'b0;
	WRITEDATA[9] = #40000 1'b1;
	WRITEDATA[9] = #20000 1'b0;
end 
// WRITEDATA[ 8 ]
initial
begin
	WRITEDATA[8] = 1'b0;
	WRITEDATA[8] = #40000 1'b1;
	WRITEDATA[8] = #20000 1'b0;
end 
// WRITEDATA[ 7 ]
initial
begin
	WRITEDATA[7] = 1'b0;
	WRITEDATA[7] = #40000 1'b1;
	WRITEDATA[7] = #20000 1'b0;
end 
// WRITEDATA[ 6 ]
initial
begin
	WRITEDATA[6] = 1'b0;
	WRITEDATA[6] = #40000 1'b1;
	WRITEDATA[6] = #20000 1'b0;
end 
// WRITEDATA[ 5 ]
initial
begin
	WRITEDATA[5] = 1'b0;
	WRITEDATA[5] = #40000 1'b1;
	WRITEDATA[5] = #20000 1'b0;
end 
// WRITEDATA[ 4 ]
initial
begin
	WRITEDATA[4] = 1'b0;
	WRITEDATA[4] = #40000 1'b1;
	WRITEDATA[4] = #20000 1'b0;
end 
// WRITEDATA[ 3 ]
initial
begin
	WRITEDATA[3] = 1'b0;
	WRITEDATA[3] = #40000 1'b1;
	WRITEDATA[3] = #20000 1'b0;
end 
// WRITEDATA[ 2 ]
initial
begin
	WRITEDATA[2] = 1'b0;
	WRITEDATA[2] = #40000 1'b1;
	WRITEDATA[2] = #20000 1'b0;
end 
// WRITEDATA[ 1 ]
initial
begin
	WRITEDATA[1] = 1'b0;
	WRITEDATA[1] = #40000 1'b1;
	WRITEDATA[1] = #20000 1'b0;
end 
// WRITEDATA[ 0 ]
initial
begin
	WRITEDATA[0] = 1'b0;
	WRITEDATA[0] = #40000 1'b1;
	WRITEDATA[0] = #20000 1'b0;
end 

// REGWRITE
initial
begin
	REGWRITE = 1'b0;
	REGWRITE = #40000 1'b1;
	REGWRITE = #10000 1'b0;
end 
// READ0_ADDR[ 4 ]
initial
begin
	READ0_ADDR[4] = 1'b0;
end 
// READ0_ADDR[ 3 ]
initial
begin
	READ0_ADDR[3] = 1'b0;
end 
// READ0_ADDR[ 2 ]
initial
begin
	READ0_ADDR[2] = 1'b0;
end 
// READ0_ADDR[ 1 ]
initial
begin
	READ0_ADDR[1] = 1'b0;
end 
// READ0_ADDR[ 0 ]
initial
begin
	READ0_ADDR[0] = 1'b0;
end 
// READ1_ADDR[ 4 ]
initial
begin
	READ1_ADDR[4] = 1'b0;
end 
// READ1_ADDR[ 3 ]
initial
begin
	READ1_ADDR[3] = 1'b0;
end 
// READ1_ADDR[ 2 ]
initial
begin
	READ1_ADDR[2] = 1'b0;
end 
// READ1_ADDR[ 1 ]
initial
begin
	READ1_ADDR[1] = 1'b0;
end 
// READ1_ADDR[ 0 ]
initial
begin
	READ1_ADDR[0] = 1'b1;
end 
endmodule

