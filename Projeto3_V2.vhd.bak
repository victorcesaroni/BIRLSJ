LIBRARY ieee ;
	USE ieee.std_logic_1164.all;
	USE ieee.std_logic_signed.all;
	
ENTITY Projeto3 IS
	PORT(	CLOCK				: IN STD_LOGIC;
	
			DBG_PC 			: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_INSTRUCAO 	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			--DBG_PC_S1 		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			--DBG_INSTRUCAO_S1:OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			--DBG_OPCODE_S2	: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);			
			DBG_RegWrite_S4	: OUT STD_LOGIC;
			--DBG_ALUSrc		: OUT STD_LOGIC;
			--DBG_ALUOp		: OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
			--DBG_RegDst		: OUT STD_LOGIC;
			--DBG_MemWrite	: OUT STD_LOGIC;
			--DBG_MemRead		: OUT STD_LOGIC;
			--DBG_MemtoReg	: OUT STD_LOGIC;
			--DBG_PCSource 	: OUT STD_LOGIC;
			--DBG_Branch 		: OUT STD_LOGIC;
			--DBG_OPCODE 		: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			--DBG_FUNCT 		: OUT STD_LOGIC_VECTOR(5 DOWNTO 0)			
			
			DBG_REGWRITE_ADDR : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
			DBG_R0_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_R1_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_R2_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_R3_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_R4_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_R5_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			DBG_R6_DATA		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	) ;
END ENTITY ; -- Projeto3


ARCHITECTURE arch OF Projeto3 IS

	COMPONENT REGISTERS
		PORT(	CLOCK			: IN STD_LOGIC;
				REGWRITE		: IN STD_LOGIC;
				READ0_ADDR	: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
				READ1_ADDR	: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
				WRITE_ADDR 	: IN STD_LOGIC_VECTOR(4 DOWNTO 0);			
				WRITEDATA 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				READ0_OUT 	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				READ1_OUT 	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
			
				DBG_R0_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				DBG_R1_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				DBG_R2_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				DBG_R3_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				DBG_R4_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				DBG_R5_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				DBG_R6_DATA	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
		);
	END COMPONENT; -- REGISTERS
	
	COMPONENT REG32
		GENERIC(N : INTEGER := 32);
		
		PORT(	CLOCK			: IN STD_LOGIC;
				ENTRADA 		: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
				REG_IN		: IN STD_LOGIC;
				SAIDA 		: OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0) 
		);
	END COMPONENT; -- REG32
	
	COMPONENT REG32_DESCIDA
		GENERIC(N : INTEGER := 32);
		
		PORT(	CLOCK			: IN STD_LOGIC;
				ENTRADA 		: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
				REG_IN		: IN STD_LOGIC;
				SAIDA 		: OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0) 
		);
	END COMPONENT; -- REG32_DESCIDA
	
	COMPONENT ADDER
		PORT(	ENTRADA_0 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				ENTRADA_1	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				RESULT 		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
		);
	END COMPONENT; -- ADDER
	
	COMPONENT MUX32_2_1
		PORT(	ENTRADA_0 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				ENTRADA_1 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				CONTROLE 	: IN STD_LOGIC;
				SAIDA 		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)		
		);
	END COMPONENT; -- MUX
	
	COMPONENT INSTRUCTIONMEMORY
		GENERIC(	N : INTEGER := 32 );
		
		PORT(	CLOCK 		: IN STD_LOGIC;
				PC				: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);				
				INSTRUCAO 	: OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0)
		);
	END COMPONENT; -- INSTRUCTIONMEMORY
	
	COMPONENT RegistradorIF_ID
		PORT( CLOCK		 	: IN STD_LOGIC;
				INSTRUCAO 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0) ;
				PC			 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0) ;				
				PC_OUT	 	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				INSTRUCAO_OUT : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
		);
	END COMPONENT; -- RegistradorIF_ID
	
	COMPONENT DATAMEMORY IS
		GENERIC (N : INTEGER := 32);
				
		PORT(	CLOCK 		: IN STD_LOGIC;
				MEMWRITE 	: IN STD_LOGIC;
				MEMREAD		: IN STD_LOGIC;
				ADDRESS		: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
				WRITEDATA	: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
				READDATA		: OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0)
		);
	END COMPONENT; -- DATAMEMORY
	
	COMPONENT EXTENSOR IS  
		PORT( X 				: IN STD_LOGIC_VECTOR(18-1 DOWNTO 0) ;
				O 				: OUT STD_LOGIC_VECTOR(32-1 DOWNTO 0)
	);
	END COMPONENT; -- EXTENSOR
		
	COMPONENT RegistradorID_EX
	  PORT ( READ_DATA_1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0) ;
				READ_DATA_2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0) ;
				SINAL_EXTENDIDO : IN STD_LOGIC_VECTOR(31 DOWNTO 0) ; -- IMEDIATO
				RD			 	: IN STD_LOGIC_VECTOR(4 DOWNTO 0) ; -- RD
				PC			 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0) ;
				OPCODE	 	: IN STD_LOGIC_VECTOR(3 DOWNTO 0) ;
				CLOCK		 	: IN STD_LOGIC;
				FUNCT 		: IN STD_LOGIC_VECTOR(5 DOWNTO 0);
				READ_DATA_1_OUT: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				READ_DATA_2_OUT: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				SINAL_EXTENDIDO_OUT: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				RD_OUT		: OUT STD_LOGIC_VECTOR(4 DOWNTO 0) ; -- RD
				OPCODE_OUT	: OUT STD_LOGIC_VECTOR(3 DOWNTO 0); 
				PC_OUT	 	: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				FUNCT_OUT	: OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
	  ) ;
	  
	END COMPONENT; -- RegistradorID_EX
	
	
	COMPONENT CONTROL
		PORT(	INSTRUCAO 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				RegWrite		: OUT STD_LOGIC;
				ALUSrc		: OUT STD_LOGIC;
				ALUOp			: OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
				RegDst		: OUT STD_LOGIC;
				MemWrite		: OUT STD_LOGIC;
				MemRead		: OUT STD_LOGIC;
				MemtoReg		: OUT STD_LOGIC;
				Branch 		: OUT STD_LOGIC;
				OPCODE 		: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
				FUNCT 		: OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
		);
	END COMPONENT; -- CONTROL
	
	
	COMPONENT MUX32_3_1
		PORT(	ENTRADA_0 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				ENTRADA_1 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				ENTRADA_2 	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				CONTROLE 	: IN STD_LOGIC_VECTOR(1 DOWNTO 0);
				SAIDA 		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0)		
		);
	END COMPONENT; -- MUX
	
	COMPONENT RegistradorEX
	  PORT ( 	
				ALUSrc		: IN STD_LOGIC;
				ALUOp			: IN STD_LOGIC_VECTOR(2 DOWNTO 0);
				RegDST		: IN STD_LOGIC;
				clock		 	: IN STD_LOGIC;
				ALUSrc_out	: OUT STD_LOGIC;
				ALUOp_out	: OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
				RegDST_out	: OUT STD_LOGIC				
	  );	  
	END COMPONENT; -- RegistradorEX
	
	
	COMPONENT RegistradorMEM
	  PORT ( 	
				MemWrite		: IN STD_LOGIC;
				MemRead		: IN STD_LOGIC;
				Branch		: IN STD_LOGIC;
				clock		 	: IN STD_LOGIC;
				MemWrite_out: OUT STD_LOGIC;
				MemRead_out	: OUT STD_LOGIC;
				Branch_out	: OUT STD_LOGIC
				
	  );	  
	END COMPONENT; -- RegistradorMEM
	
	COMPONENT RegistradorWB
	  PORT ( 	
				MemToReg		: IN STD_LOGIC;
				RegWrite		: IN STD_LOGIC;
				clock		 	: IN STD_LOGIC;
				MemToReg_out: OUT STD_LOGIC;
				RegWrite_out: OUT STD_LOGIC
				
	  );	  
	END COMPONENT; -- RegistradorWB
	
	COMPONENT RegistradorEX_MEM
	  PORT ( 	
				saidasomador			: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				sinalZero				: IN STD_LOGIC;
				ALUResult				: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				read_data_2 			: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				saida_mux_RegDST		: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
				clock		 				: IN STD_LOGIC;
				saidasomador_out		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				sinalZero_out			: OUT STD_LOGIC;
				ALUResult_out			: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				read_data_2_out		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				saida_mux_RegDST_out	: OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
	  );	  
	END COMPONENT; -- RegistradorEX_MEM	
	
	COMPONENT ALUControl  
	  PORT ( funct				: IN STD_LOGIC_VECTOR(5 DOWNTO 0) ;
				ALUOp 			: IN STD_LOGIC_VECTOR(2 DOWNTO 0) ;
				Opcode 			: IN STD_LOGIC_VECTOR(3 DOWNTO 0) ;
				operacao 		: OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
	  );
	END COMPONENT; -- ALUControl
	
	COMPONENT ALU
		PORT(	ALU_0 		: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				ALU_1 		: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				ALUOP 		: IN STD_LOGIC_VECTOR(2 DOWNTO 0);
				RESULT 		: OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				ZERO 			: OUT STD_LOGIC
		);
	END COMPONENT; -- ALU
	
	COMPONENT MUX5_2_1
		PORT(	ENTRADA_0 	: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
				ENTRADA_1 	: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
				CONTROLE 	: IN STD_LOGIC;
				SAIDA 		: OUT STD_LOGIC_VECTOR(4 DOWNTO 0)		
		);
	END COMPONENT; -- MUX

	COMPONENT RegistradorMEM_WB
	  PORT ( 	
				read_data	: IN STD_LOGIC_VECTOR(31 DOWNTO 0);
				address 		: IN STD_LOGIC_VECTOR(31 DOWNTO 0); -- CONFerir o tamanho
				saida_mux_RegDST: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
				clock		 	: IN STD_LOGIC;
				read_data_out:OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				address_out : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
				saida_mux_RegDST_OUT: OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
	  );	  
	END COMPONENT; -- RegistradorMEM_WB


BEGIN
	

	-------------------------------------------------------------------------------------------
	-- IF 1

																
	-------------------------------------------------------------------------------------------
	-- ID 2
	
	
	-------------------------------------------------------------------------------------------
	-- EX 3
		
		
	-------------------------------------------------------------------------------------------
	-- MEM 4

	
	-------------------------------------------------------------------------------------------
	-- WB	5
	

	-------------------------------------------------------------------------------------------
	-- DBG
	
	DBG_REGWRITE_ADDR <= REGWRITE_ADDR;
	DBG_PC <= PC_DATA;
	DBG_INSTRUCAO <= INSTRUCAO;
	--DBG_PC_S1 <= PC_S1;
	--DBG_INSTRUCAO_S1 <= INSTRUCAO_S1;
	--DBG_OPCODE_S2 <= OPCODE_S2;
	
	DBG_RegWrite_S4	<= RegWrite_S4;
	--DBG_ALUSrc		<= ALUSrc;
	--DBG_ALUOp		<= ALUOp;
	--DBG_RegDst		<= RegDst;
	--DBG_MemWrite	<= MemWrite;
	--DBG_MemRead		<= MemRead;
	--DBG_MemtoReg	<= MemtoReg;
	--DBG_PCSource 	<= PCSource_S3;
	--DBG_Branch 		<= Branch;
	--DBG_OPCODE 		<= OPCODE; 	
	--DBG_FUNCT 		<= FUNCT;
	
END ARCHITECTURE ; -- arch